Project Actors:
	Cards
	Inventory
	Users -> User, Friends
	Profile
	Photograph
	System

Inventory

//User case	US01.01.01/US01.05.01
public void testUS010101(){
	Inventory inventory = new Inventory();

	//User decides to create a new card from their
	//inventory view.  He is prompted on the UI for
	// the following data
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	
	//The card is created after the user approves the data
	//they have entered
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);

	assertEquals(name, card.getName());
	assertEquals(quantity, card.getQuantity());
	assertEquals(quality, card.getQuality());
	assertEquals(catagorty, card.getCatagory());
	assertEquals(tradable, Card.isTradable());
	assertEquals(comments, Card.getComments());


	//It gets added to their inventory
	Inventory inventory = new Inventory(card);
	assertEquals(inventory.size(), 1);

	//They can remove the card from their inventory
	inventory.removeCard("Charizard");
	assertEquals(inventory.size(),0);

}


//User case US01.04.01
public void testUS010401{

	//The user creates a card
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);

	assertEquals(name, card.getName());
	assertEquals(quantity, card.getQuantity());
	assertEquals(quality, card.getQuality());
	assertEquals(catagorty, card.getCatagory());
	assertEquals(tradable, card.isTradable());
	assertEquals(comments, card.getComments());

	//Then realized that they got all the info wrong
	//From the item view UI, they can enter the edit mode and
	//Change the card info.
	String newname = "Blue Eyes White Dragon";
	Integer newquantity = 9;
	Quality newquality = new Quality(3);
	String newcatagory = "YuGiOh";
	String newseries = "stupid series";
	boolean newtradable = false;
	String newcomments = "Dime a dozen";

	card.setName(newname);
	card.setQuantity(newquanitity);
	card.setQuality(newquality);
	card.setCatagory(newcatagory);
	card.setSeries(newseries);
	card.setTradable(newtradable);
	card.setComments(newcomments);

	assertEquals(newname, card.getName());
	assertEquals(newquantity, card.getQuantity());
	assertEquals(newquality, card.getQuality());
	assertEquals(newcatagorty, card.getCatagory());
	assertEquals(newtradable, card.isTradable());
	assertEquals(newcomments, card.getComments());

}


//user case US01.06.01
public void testUS010601(){

	Card card = new Card();

	//When the user creates a card, they can choose a default catagory from the drop down menu
	ArrayList<String> releventcatagories = new ArrayList<String>("Magic The Gathering","Pokemon","YuGiOh","Digimon","Sports","Steam Trading Card",
												"Neopets", "Amiibo Cards", "Shrek Trading Cards", "MISC");
	assertEquals(releventcatagories, card.getRelevantCatagories());
}

-----------

Friends

//Search User through the search tab by Username
//it will then show a list of usernames that may match the pattern
//or it will show nothing if there is no username
void testUS02.01.01() {
	userList users = loadFromStorage();
	users.add(user1);
	users.add(user2);
	users.add(johnCena);
	assertEquals(johnCena,users.search("johnCena");
	assertEquals([user1,user2],users.search("user"));
}

//User needs to add other user into friends list
//Can be done by searching a username
void testUS02.02.01() {
	user johnCena = new user();
	user user1 = new user();
	johnCena.addFriend(user1);
	assertEquals(user1,johnCena.getFriend("user1"));
}

//User needs to remove another user from his friends list
//Can be done by searching user in friend list and then pressing
//remove button
void testUS02.03.01() {
	user user1 = new user();
	user johnCena = new user();
	user user2 = new user();
	user1.addFriend(johnCena);
	user1.addFriend(user2);

	user1.remove(johnCena);
	assertEquals(NULL, user1.friends.getFriend("johnCena");
}

//User will  have contact information (Name) and his city
//Will be displayed in profile
//There should be option to update contact information and city
void testUS02.04.01() {
	user johnCena = new user("The Heavyweight Champion","WWE RAW");
	assertEquals("The Heavyweight Champion",johnCena.getName());
	assertEquals("WWE RAW", johnCena.getCity());
	johnCena.setName("John Felix Anthony Cena");
	johnCena.setCity("Tampa, Florida, U.S.")
	assertEquals("John Felix Anthony Cena",johnCena.getName());
	assertEquals("Tampa, Florida, U.S.", johnCena.getCity());
}

//User will get friends contact information and the city
//This will be displayed on firends profile page
void testUS2.05.01() {
	user user1 = new user();
	user johnCena = new user("The Heavyweight Champion","WWE RAW");
	user user2 = new user();
	user1.addFriend(johnCena);
	user1.addFriend(user2);

	assertEquals("The Heavyweight Champion",user1.getFriend("johnCena").getName);
	assertEquals("WWE RAW", user1.getFriend("johnCena").getCity);
}

-----------

Browse Search Inventories of Friends

Helper Functions:

User GetMockUser(){
	User user = new User("Snape", "Hogwartz");
	String name = "Black Lotus";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Magic The Gathering";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	Card blackLotus = new Card(name, quantity, quality, catagory, series, tradable, comments);

	name = "Time Walk";
	Card timeWalk = new Card(name, quantity, quality, catagory, series, tradable, comments);

	Inventory inventory = new Inventory();
	inventory.addCard(blackLotus);
	inventory.addCard(timeWalk);
	user.addInventory(inventory);
	return user;
}

User GetMockFriend(){
	User user = GetMockUser();
	user.changeUsername("Harry Potter");
	return user;
}

US03.01.01
//The User opens a friends' profile and then opens thier inventory
//The User can then browse the friends' cards

void testUS030101(){
	User myuser = GetMockUser();
	String myTestFriendName = "Harry Potter";
	User myTestFriend = GetMockFriend();
	myuser.friends.add(myTestFriend);
	User friend = myuser.friends.getFriend(myTestFriendName);
	Inventory friendInventory = friend.getInventory();
}

US03.01.02
//The User has thier friends profile
//The User searches thier friends profile by category

void testUS030102(){
	User friend = GetMockFriend();
	Inventory friendInventory = friend.getInventory();
	String searchCategory = "Magic The Gathering";
	List<Card> results = friendInventory.searchByCategory(searchCategory);
	//serach results shownn to user
}

US03.01.03
//The User has thier friends profile
//The User searches thier friends profile by text

void testUS030102(){
	User friend = GetMockFriend();
	Inventory friendInventory = friend.getInventory();
	String searchQuery = "Black Lotus";
	List<Card> results = friendInventory.searchByText(searchQuery);
	//serach results shownn to user
}

US03.02.01
//The Owner Has Publicly Available Items
//The Owner's Friends Can Browse Those Items

void testUS030201(){
	User owner = GetMockUser();
	Inventory inventory = owner.getInventory();
	Card publicCard = inventory.searchByText("Black Lotus");
	Card privateCard = inventory.serachByText("Time Walk");
	publicCard.setPublic();
	privateCard.setPrivate();
	User friend = GetMockFriend();
	friend.friends.add(owner);
	User anotheOwner = friend.friends.getFriend("Snape");
	Inventory ownerInventory = anotherOwner.getInventory();
	List<Card> ownerCards = ownerInventory.searchByText("*");
	assertEqual(ownerCards.get(0), publicCard);
	assertEqual(ownerCards.get(1), null); //we should only get the public card
}

-----


Photographs of Items


US06.01.01
//Claimant attaches photograph to an item

void testUS030201(){
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);

	//user navigates in the create a card GUI to the "Add images"
	// section and can add images from camera or take a new one
	Image firstImage = new Image("myImageUrl");
	Image secondImage = new Image("myImageUrl");
	card.addImage(firstImage);
	card.addImage(secondImage);
	List<Image> cardImages = card.getImages();
	assertTrue(cardImages.contains(firstImage));
	assertTrue(cardImages.contains(secondImage));
}

US06.02.01
//Owner has an Item
//Owner gets photos attached to items

void testUS060201(){
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);


	//user navigates in the create a card GUI to the "Add images"
	// section and can add images from camera or take a new one
	Image firstImage = new Image("myImageUrl");
	Image secondImage = new Image("myImageUrl");
	card.addImage(firstImage);
	card.addImage(secondImage);
	List<Image> cardImages = card.getImages();
	assertTrue(cardImages.contains(firstImage));
	assertTrue(cardImages.contains(secondImage));
}

US06.03.01
//User has an Item
//User deletes image from item

void testUS060301(){
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);
	Image firstImage = new Image("myImageUrl");
	Image secondImage = new Image("myImageUrl");
	card.addImage(firstImage);
	card.addImage(secondImage);

	List<Image> cardImages = card.getImages();
	assertTrue(cardImages.contains(firstImage));
	assertTrue(cardImages.contains(secondImage));

	//user from the edit inventory item GUI navigates to the 
	//images view and can remove, add or rearrange images
	card.deleteImage(firstImage);
	List<Image> cardImages = card.getImages();
	assertTrue(!cardImages.contains(firstImage));
	assertTrue(cardImages.contains(secondImage));
}

US06.04.01
//User adds an Image larger than 65536 bytes
//Card notifies that it cannot add a image file of that size

void testUS060401{
	Boolean exceptionThrown = false;
	Image image = new Image("largeImageUrl");
	try {
		String name = "Charizard";
		Integer quantity = 2;
		Quality quality = new Quality(73);
		String catagory = "Pokemon";
		String series = "series";
		boolean tradable = true;
		String comments = "Gently bent edge, 100HP";

		Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);
		card.addImage(image); //this should throw IOexption
		
	} catch (IOexception ex) {
		exceptionThrown = true;
	}
	assertTrue(exceptionThrown);
}

US06.05.01
//Borrower has photo downloads disabled
//Borrower manually downloads item images

void testUS600501{
	User user = GetMockUser();
	Inventory inventory = owner.getInventory();
	Card card = inventory.searchByText("Black Lotus");
	List<Image> images = card.getImages();
	//saveLocalResource(int ownerHashCode, string key, object value);
	saveLocalResource(card.hashCode, "images", images); 
}






//************************** OFFLINE BEHAVIOURS **************************
//User Case US09.01.01
public void testUS090101{
//User wants to make changes to inventory while offline and have changes
//save to server automatically when connection is restored

	//System cannot contact server
	Boolean connection_established = Boolean.FALSE;

	//User creates new item as per User case US01.01.01/US01.05.01
	User user1 = new User();
	user1.getInventory().add(new Card());
	Profile profile = user1.getProfile();

	//System saves changes locally
	profile.saveToLocal("users_profile");

	//User re-establishes connection with server
	connection_established = Boolean.TRUE;

	//System recognizes connection and saves changes to server
	profile.saveToExternal("users_profile");

	Profile profile2 = loadFromExternal("users_profile");
	assertEquals(profile, profile2);
}

//User Case US09.02.01
public void testUS090201{
//User wants to propose trades offline, once connectivity reseumes the trades will be established

	//System cannot contact server
	Boolean connection_established = Boolean.FALSE;

	//User proposes trade while offline
	User user1 = new User();
	User user2 = new User();
	Profile profile = user1.getProfile();
	Trade trade = new Trade(user1,user2);
	Boolean trade_success = trade.send();
	assertFalse(trade_success);
	
	//System saves changes locally
	profile.saveToLocal();

	//User re-establishes connection with server
	connection_established = Boolean.TRUE;

	//System recognizes connection and attempts to resend trade
	profile.sendAllTradesInQueue();

	//User 1 sees the newly proposed trade
	assertTrue(user1.hasTrade(trade.id()));

	//User 2 sees the newly proposed trade
	assertTrue(user2.hasTrade(trade.id()));
}

//User Case US09.03.01
public void testUS090301{
//User opens up friends inventories that has been previously opened while offline
	
	//User browses friends inventory as per User Case US03.01.01
	User user1 = new User();
	User user2 = new User();
	Inventory friends_inventory = user2.getInventory();
	
	//System saves copy of inventory locally
	user1.getProfile().saveToCache(user2.getName(), friends_inventory);

	//System cannot contact server
	Boolean connection_established = Boolean.FALSE;

	//User browses friends inventory while offline
	Inventory friends_cached_inventory = loadFromCache(user2.getName());

	assertEquals(friends_inventory, friends_cached_inventory);
}



//User case	US10.01.01
public void testUS010101(){
	
	//Default config downloadsimages
	Config config = new Config();

	assertTrue(config.imagesDowloadable());

	//User with a swipe switch decides not 
	//to download images

	config.setImagesDownlaodable(FALSE);

	assertFalse(config.imagesDowloadable());

}

//User case	US10.02.01
public void testUS010101(){
	//User creates their profile on prompt
	User user = new User("Snape", "Hogwartz");
	
	assertEquals("Snape", user.getName);
	assertEquals("Hogwartz", user.getLocation);

	//The they realize they forgot their name and where they were
	user.setName("Ruby Rose");
	user.setLocation("beacon");

	assertEquals("Ruby Rose", user.getName);
	assertEquals("beacon", user.getLocation);

}

