IProject Actors:
	Cards
	Inventory
	Users -> User, Friends, Borrower, Owner
	Profile
	Photograph
	System
	Email
	Config

Inventory




public void testUS010101(){
	Inventory inventory = new Inventory();

	//User case	US01.01.01
	//User adds card to their inventory

	/*
	Actors: User, Cards, Inventory, System
	Goal: Add Cards to user inventory
	Trigger:  User clicks the add button from
		the inventory view screen
	Precondition:  User has a card they want to add
	Postcondition:  New card is viewable by the user
		and their friends

	Basic Flow:
		
		1) User clicks add button from inventory view
		2) View appears with empty fields to enter info about the card
		3) User enters the info they have about the card (and possibly multiple photos)
		4) User reviews info and clicks "accept"
		5) The system creates a new card with the info provided
		6) The system adds the new card to the Inventory associated
			with the user
		7) The card is viewable to the user from the inventory view
			now and is also viewable (if the user made it viewable)
			friends.
	*/


	//User decides to create a new card from their
	//inventory view.  He is prompted on the UI for
	// the following data
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	
	//The card is created after the user approves the data
	//they have entered
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);

	assertEquals(name, card.getName());
	assertEquals(quantity, card.getQuantity());
	assertEquals(quality, card.getQuality());
	assertEquals(catagorty, card.getCatagory());
	assertEquals(tradable, Card.isTradable());
	assertEquals(comments, Card.getComments());


	//It gets added to their inventory
	Inventory inventory = new Inventory(card);
	assertEquals(inventory.size(), 1);

	//US01.05.01
	//User wants to delete a card from inventory

	/*
	Actors: User, Cards, Inventory, System
	Goal: Removes Cards from user inventory
	Trigger:  User clicks the card to view it,
		clicks edit and then remove card
	Precondition:  User has a card they want to remove
	Postcondition:  New card is no longer viewable by the user
		and their friends

	Basic Flow:
		
		1) User clicks the card to view it, clicks edit and then remove card
		2) The system confims revoval of card with a prompt
		3) The user confirms
		4) The card is no long viewable to the user from the inventory view
			now and is no longer viewable to friends

	Exceptions:

		4.1) Other users have downloaded cards offline 
		4.2) Those cards are removed as soon as the other user is online
	*/

	
	inventory.removeCard("Charizard");
	assertEquals(inventory.size(),0);

}

public void testUS010401{

	//User case	US01.04.01
	//User edits card info

	/*
	Actors: User, Cards, Inventory, System
	Goal: Edit the info on a users card
	Trigger:  User clicks the add button from
		the inventory view screen
	Precondition:  User has a card they want to add
	Postcondition:  New card is viewable by the user
		and their friends

	Basic Flow:
		
		1) User clicks the card to view it, clicks edit
		1.1) The system retrieves the card info
		2) The view of the card is now editable with editable text fields and a viewable toggle
		3) User changes the info they have about the card (and possibly multiple photos)
		4) User reviews info and clicks "accept"
		5) The system edits the info of the card the user selected
		6) The system replaces the edited card to the Inventory associated
			with the user
		7) The edited card is viewable to the user from the inventory view
			now and is also viewable (if the user made it viewable)
			friends.

		Exceptions:

		7.1) Other users have downloaded cards offline 
		7.2) Card info is updated as soon as teh other users are online
	*/

	//The user creates a card
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);

	assertEquals(name, card.getName());
	assertEquals(quantity, card.getQuantity());
	assertEquals(quality, card.getQuality());
	assertEquals(catagorty, card.getCatagory());
	assertEquals(tradable, card.isTradable());
	assertEquals(comments, card.getComments());

	//Then realized that they got all the info wrong
	//From the item view UI, they can enter the edit mode and
	//Change the card info.
	String newname = "Blue Eyes White Dragon";
	Integer newquantity = 9;
	Quality newquality = new Quality(3);
	String newcatagory = "YuGiOh";
	String newseries = "stupid series";
	boolean newtradable = false;
	String newcomments = "Dime a dozen";

	card.setName(newname);
	card.setQuantity(newquanitity);
	card.setQuality(newquality);
	card.setCatagory(newcatagory);
	card.setSeries(newseries);
	card.setTradable(newtradable);
	card.setComments(newcomments);

	assertEquals(newname, card.getName());
	assertEquals(newquantity, card.getQuantity());
	assertEquals(newquality, card.getQuality());
	assertEquals(newcatagorty, card.getCatagory());
	assertEquals(newtradable, card.isTradable());
	assertEquals(newcomments, card.getComments());

}



public void testUS010601(){

	//user case US01.06.01
	//The user has the ability to choose from
		//preset catagories of cards upon creation and editing

	/*
	Actors: User, Cards, Inventory, System
	Goal: Upon creation, there are preset catagories to choose from
	Trigger:  User clicks the add button from
		the inventory view screen/or edit button from card view
	Precondition:  User has a card they want to add/edit
	Postcondition:  New card is viewable by the user
		and their friends

	Basic Flow:
		
		1) User clicks the card to view it, clicks edit/or add card from inventory view
		1.1) The system retrieves the card info/prompts for new card info
		2) The view of the card is now editable/the user can enter info for a new card
		3) User changes catagory/enters catagory with a pre-determined drop down menue of 
			specific card catagories
		4) User reviews info and clicks "accept"
		5) The system edits the info of the card the user selected/creates new card with entered info
		6) The system replaces the edited card to the Inventory associated
			with the user/adds card to the inventory
		7) The edited/new card is viewable to the user from the inventory view
			now and is also viewable (if the user made it viewable)
			friends.

		Exceptions:

		7.1) Other users have downloaded cards offline 
		7.2) Card info is updated as soon as teh other users are online
	*/

	Card card = new Card();

	//When the user creates a card, they can choose a default catagory from the drop down menu
	ArrayList<String> releventcatagories = new ArrayList<String>("Magic The Gathering","Pokemon","YuGiOh","Digimon","Sports","Steam Trading Card",
												"Neopets", "Amiibo Cards", "Shrek Trading Cards", "MISC");
	assertEquals(releventcatagories, card.getRelevantCatagories());
}

-----------

Friends

//Search User through the search tab by Username
//it will then show a list of usernames that may match the pattern
//or it will show nothing if there is no username

/*
	Actors: Users, System
	Goal: search for other Users using username
	Trigger:  User clicks the search funtion to use it,
		and types in username
	Precondition:  User has a username they want to search
	Postcondition:  Will show list of user with similar username
					or nothing if none are similar

	Basic Flow:
		
		1) User logs in if not in his account
		2) user then clicks the search function
		3) user types in username
		4) A list of username that are similar will pop up, and if
		   there are no similar names will show blank list
	*/

void testUS02.01.01() {
	userList users = loadFromStorage();
	users.add(user1);
	users.add(user2);
	users.add(johnCena);
	assertEquals(johnCena,users.search("johnCena");
	assertEquals([user1,user2],users.search("user"));
}

//User needs to add other user into friends list
//Can be done by searching a username

/*
	Actors: Users, Friends, System
	Goal: add user to friends list
	Trigger:  User clicks the add funtion in friend list page,
		      and types in username of user to add
	Precondition:  User has a username they want to add to list
	Postcondition:  Will show friend list with the new added user, 
					if there is one
	Basic Flow:
		
		1) User logs in if not in his account
		2) user then clicks the add function in the friend list page
		3) user types in username
		4) A list of username that are similar will pop up, and if
		   there are no similar names will show blank list
		5) User will then click username to add that user to friend
		   list
	*/

void testUS02.02.01() {
	user johnCena = new user();
	user user1 = new user();
	johnCena.addFriend(user1);
	assertEquals(user1,johnCena.getFriend("user1"));
}

//User needs to remove another user from his friends list
//Can be done by searching user in friend list and then pressing
//remove button

/*
	Actors: Users, Friends, System
	Goal: remove user to friends list
	Trigger:  User clicks the remove funtion in friend list page
	Precondition:  User has a friend they want to remove from list
	Postcondition:  Will show friend list with the user removed

	Basic Flow:
		
		1) User logs in if not in his account
		2) user then clicks the remove function in the friend list page
		3) user will then click friend that will be removed
*/

void testUS02.03.01() {
	user user1 = new user();
	user johnCena = new user();
	user user2 = new user();
	user1.addFriend(johnCena);
	user1.addFriend(user2);

	user1.remove(johnCena);
	assertEquals(NULL, user1.friends.getFriend("johnCena");
}

//User will  have contact information (Name) and his city
//Will be displayed in profile
//There should be option to update contact information and city

/*
	Actors: Users, Friends,  System, Profile
	Goal: Viewing own friends Profile
	Trigger:  User taps friend username on friend list screen
	Precondition:  User wishes to view friend profile
	Postcondition:  Will show screen of friend profile

	Basic Flow:
		
		1) User logs in if not in his account
		2) user then goes to friend list
		3) user clicks on username of fried we wishes to view
		4) Will go to friends profile
	*/

void testUS02.04.01() {
	user johnCena = new user("The Heavyweight Champion","WWE RAW");
	assertEquals("The Heavyweight Champion",johnCena.getName());
	assertEquals("WWE RAW", johnCena.getCity());
	johnCena.setName("John Felix Anthony Cena");
	johnCena.setCity("Tampa, Florida, U.S.")
	assertEquals("John Felix Anthony Cena",johnCena.getName());
	assertEquals("Tampa, Florida, U.S.", johnCena.getCity());
}

//User will get friends contact information and the city
//This will be displayed on firends profile page

/*
	Actors: Users, System, Profile
	Goal: Viewing own user Profile
	Trigger:  User goes to profile screen
	Precondition:  User wishes to view/change profile
	Postcondition:  Will show user profile with updated information
					if it was changed
	Basic Flow:
		
		1) User logs in if not in his account
		2) user then goes to user profile
		3) If user wishes to change profile, he'll hit the edit button
		4) Profile we'll be updated with changes
	*/

void testUS2.05.01() {
	user user1 = new user();
	user johnCena = new user("The Heavyweight Champion","WWE RAW");
	user user2 = new user();
	user1.addFriend(johnCena);
	user1.addFriend(user2);

	assertEquals("The Heavyweight Champion",user1.getFriend("johnCena").getName);
	assertEquals("WWE RAW", user1.getFriend("johnCena").getCity);
}

-----------

//Use Case Name :Browse and Search Inventories of Friends
//Participating Actors: Main User, User's Friends
//Goal: Main User can get thier friends' inventory and then search by text or category
//Trigger: Main User browses friends' inventory
//Precondition: Main User knows which friend to search and the name or category of card they want to find
//Postcondition: On success, user can view cards in a friends' inventory and then make a trade.
//See US04.xx.xx for trading use cases
//Related User Stories: US03.01.01 - US03.02.01

//Basic Flow
// 1.) User can browse through a list of friends
// 2.) User can select a friend and the friends' inventory is displayed
// 3.) User can inititate a search function either by category or text
// 4.) Cards that match search criteria are displayed to user
// 5.) User can select card from search results to display it



Helper Functions:

User GetMockUser(){
	User user = new User("Snape", "Hogwartz");
	String name = "Black Lotus";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Magic The Gathering";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	Card blackLotus = new Card(name, quantity, quality, catagory, series, tradable, comments);

	name = "Time Walk";
	Card timeWalk = new Card(name, quantity, quality, catagory, series, tradable, comments);

	Inventory inventory = new Inventory();
	inventory.addCard(blackLotus);
	inventory.addCard(timeWalk);
	user.addInventory(inventory);
	return user;
}

User GetMockFriend(){
	User user = GetMockUser();
	user.changeUsername("Harry Potter");
	return user;
}

US03.01.01
//The User opens a friends' profile and then opens thier inventory
//The User can then browse the friends' cards

void testUS030101(){
	User myuser = GetMockUser();
	String myTestFriendName = "Harry Potter";
	User myTestFriend = GetMockFriend();
	myuser.friends.add(myTestFriend);
	User friend = myuser.friends.getFriend(myTestFriendName);
	Inventory friendInventory = friend.getInventory();
}

US03.01.02
//The User has thier friends profile
//The User searches thier friends profile by category

void testUS030102(){
	User friend = GetMockFriend();
	Inventory friendInventory = friend.getInventory();
	String searchCategory = "Magic The Gathering";
	List<Card> results = friendInventory.searchByCategory(searchCategory);
	//serach results shownn to user
}

US03.01.03
//The User has thier friends profile
//The User searches thier friends profile by text

void testUS030102(){
	User friend = GetMockFriend();
	Inventory friendInventory = friend.getInventory();
	String searchQuery = "Black Lotus";
	List<Card> results = friendInventory.searchByText(searchQuery);
	//serach results shownn to user
}

US03.02.01
//The Owner Has Publicly Available Items
//The Owner's Friends Can Browse Those Items

void testUS030201(){
	User owner = GetMockUser();
	Inventory inventory = owner.getInventory();
	Card publicCard = inventory.searchByText("Black Lotus");
	Card privateCard = inventory.serachByText("Time Walk");
	publicCard.setPublic();
	privateCard.setPrivate();
	User friend = GetMockFriend();
	friend.friends.add(owner);
	User anotheOwner = friend.friends.getFriend("Snape");
	Inventory ownerInventory = anotherOwner.getInventory();
	List<Card> ownerCards = ownerInventory.searchByText("*");
	assertEqual(ownerCards.get(0), publicCard);
	assertEqual(ownerCards.get(1), null); //we should only get the public card
}

-----

Trade With Friends:

// US04.01.01
// Borrower wants to trade a card with the owner.
// Send a trade request to an owner of a card and check if the owner has that request.

void testUS04.01.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade = new Trade(borrower, owner);
	trade.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade.list2.add(owner.getInventory().getCard(“Mewtwo”);
	
	// Send trade offer button clicked.
	trade.sendTrade(owner);
	trade.setNotification(owner);
	assertTrue(owner.getTrades().hasTrade(trade));
}

// US04.02.01
// Test to see if the owner has a trade notification.

void testUS04.02.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade = new Trade(borrower, owner);
	trade.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade.list2.add(owner.getInventory().getCard(“Mewtwo”);
	
	// Send trade offer button clicked.
	trade.sendTrade(owner);
	trade.setNotification(owner);
	
	assertTrue(owner.getNotifications().contains(trade.setNotification(owner)));
}

// US04.03.01
// Owner can accept of decline notification.

void testUS04.03.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade1 = new Trade(borrower, owner);
	trade1.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade1.list2.add(owner.getInventory().getCard(“Mewtwo”);

	// Borrower adds cards with the “plus” button.
	Trade trade2 = new Trade(borrower, owner);
	trade2.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade2.list2.add(owner.getInventory().getCard(“Mewtwo”);
	
	// Send trade offer button clicked.
	trade1.sendTrade(owner);
	trade1.setNotification(owner);
	trade2.sendTrade(owner);
	trade2.setNotification(owner);

	//Owner clicks the accept button
	assertTrue(trade.1status() == “ACCEPTED”);	

	//Owner clicks the decline button
	assertFalse(trade2.status() == “DECLINED”);
}

// US04.04.01
// Owner can set a counter offer if the owner declines a trade

void testUS04.04.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade = new Trade(borrower, owner);
	trade.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade.list2.add(owner.getInventory().getCard(“Mewtwo”);
	
	// Send trade offer button clicked.
	trade.sendTrade(owner);
	trade.setNotification(owner);

	// Owner declines the trade.
	// Owner makes a new trade offer when the counter offer button is clicked.
	if(trade.status() == “DECLINED”) {
		Trade trade2 = newTrade(owner, borrower);
		trade2.list1.add(owner.getInventory().getCard(“Mewtwo”);
		trade2.list2.add(borrower.getInventory().getCard(“Mew”);

		trade2.sendTrade(owner);
		trade2.setNotification(borrower);
	}

	assertTrue(borrower.getNotifications().contains(trade2.setNotification(borrower)));
}

// US04.05.01
// The user or borrower can edit the trade or counter-trade.

void testUS04.05.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds and removes cards with the plus and minus button.
	Trade trade = new Trade(borrower, owner);
	trade.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade.list1.add(borrower.getInventory().getCard(“Mew”);
	trade.list2.add(owner.getInventory().getCard(“Mewtwo”);
	trade.list2.remove(1);	

	assertTrue(trade.list1.contains(“Darkrai”));
	assertTrue(trade.list2.contains(“Mewtwo”));
	assertFalse(trade.list1.contains(“Mew”));

	// Send trade offer button clicked.
	trade.sendTrade(owner);
	trade.setNotification(owner);

	// Owner declines the trade.
	// Owner makes a new trade offer when the counter offer button is clicked.
	if(trade.status() == “DECLINED”) {
		// Owner adds and removes cards with the plus and minus button.
		Trade trade2 = newTrade(owner, borrower);
		trade2.list1.add(owner.getInventory().getCard(“Deoxys”);
		trade2.list1.add(owner.getInventory().getCard(“Register”);
		trade2.list1.remove(1);
		trade2.list2.add(borrower.getInventory().getCard(“Mew”);

		assertTrue(trade.list1.contains(“Deoxys”));
		assertTrue(trade.list2.contains(“Mew”));
		assertFalse(trade.list1.contains(“Register”));

		trade2.sendTrade(owner);
		trade2.setNotification(borrower);
	}
}

// US04.06.01
// The borrower can delete the trade or counter-trade.

void testUS04.06.01() {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds and removes cards with the plus and minus button.
	Trade trade = new Trade(borrower, owner);
	trade.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade.list2.add(owner.getInventory().getCard(“Mewtwo”);

	// Send trade offer button clicked.
	trade.sendTrade(owner);
	trade.setNotification(owner);

	// Owner declines the trade.
	// Owner makes a new trade offer when the counter offer button is clicked.
	if(trade.status() == “DECLINED”) {
		// Owner adds and removes cards with the plus and minus button.
		Trade trade2 = newTrade(owner, borrower);
		trade2.list1.add(owner.getInventory().getCard(“Deoxys”);
		trade2.list2.add(borrower.getInventory().getCard(“Mew”);

		// User clicks the delete trade button or back 
		// button to stop the trade they are making.
		trade.destructor();
	}

	assertNull(trade);

	User borrower2 = new User(currentUser.Name, “Canada”);
	User owner2 = new User(“Mr. Bean”, “Canada”);

	// Borrower adds and removes cards with the plus and minus button.
	Trade trade2 = new Trade(borrower2, owner2);
	trade2.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade2.list2.add(owner.getInventory().getCard(“Mewtwo”);
	
	// User clicks the delete trade button or back 
	// button to stop the trade they are making.
	trade2.destructor();

	assertNull(trade2);
}

// US04.07.01
// If the owner of a trade accepts, both parties are email relevant trace information,
// as well as the owner will supply comments for how to continue with the trade.

void testUS04.07.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade = new Trade(borrower, owner);
	trade.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade.list2.add(owner.getInventory().getCard(“Mewtwo”);

	// Send trade offer button clicked.
	trade.sendTrade(owner);
	trade.setNotification(owner);

	// Owner clicks the accept button. An input box
	// will be displayed for extra comments.
	String extraComments = inputTextView.text;
	Email emailBorrower = new Email(borrower, extraComments);
	Email emailOwner = new Email(owner, “”);

	emailBorrower.send();
	emailOwner.send();

	assertNotNull(extraComments);
	assertEquals(emailOwner.status() ,“SENT”);
	assertEquals(emailBorrower.status(), “SENT”);
}

// US04.08.01
// Owners and Borrowers can view all past trades with themselves.

void testUS04.08.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade1 = new Trade(borrower, owner);
	Trade trade2 = new Trade(borrower, owner);

	// Send trade offer button clicked.	
	trade1.sendTrade(owner);
	trade2.sendTrade(owner);

	// Owner accepts trade1 and leaves trade2 alone
	// User exits and checks there trades
	List<Trade> ownerTrades = owner.getTrades()
	List<Trade> borrowerTrades = owner.getTrades()

	assertTrue(ownerTrades.contains(trade1));
	assertTrue(ownerTrades.contains(trade2));
	assertTrue(borrowerTrades.contains(trade1));
	assertTrue(borrowerTrades.contains(trade2));
}

// US04.09.01
// Owners and Borrowers can view all past trades with themselves as
// either a borrower or an owner.

void testUS04.09.01 () {
	User user1 = new User(currentUser.Name, “Canada”);
	User user2 = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade1 = new Trade(user1, user2); //user 1 sends a trade to user 2 
	Trade trade2 = new Trade(user2, user1); //user 2 sends a trade to user 1

	// Send trade offer button clicked.	
	trade1.sendTrade(user1); //is the user parameter necessary? we already specified in "new Trade(...,...)"
	trade2.sendTrade(user2);

	// Owner accepts trade1 and leaves trade2 alone
	// User exits and checks there trades
	List<Trade> user1Trades = user1.getTrades()
	List<Trade> user2Trades = user2.getTrades()

	assertTrue(user1Trades.get(trade1).isOwner()); //make sure user 1 owns trade 1
	assertTrue(user2Trades.get(trade1).isBorrower()); //make sure user 2 is borrowing trade 1
	assertTrue(user1Trades.get(trade2).isBorrower()); //make sure user 1 is borrowing trade 1
	assertTrue(user2Trades.get(trade2).isOwner()); //make sure user 2 owns trade 1
	
	assertTrue(!user1Trades.get(trade2).isOwner()); //make sure user 1 doesnt own trade 2
	assertTrue(!user2Trades.get(trade2).isBorrower()); //make sure user 2 doesnt borrow trade 2

	//Viewing trades and separating them will be done in UI.
}


//Use Case Name: User uploads and deletes photos of their cards
//Participating Actors: Owner, Other Users
//Goal: User can upload and delete pictures of cards they can own.
//Trigger: User selects edit photos on a card in thier inventory
//Precondition: if a user want to upload a card image they have it available.
//Postcondition: On success, pitures are uploaded for owner and other users to see on upload. On delete, owner and other users cannot see deleted picture
//Related User Stories: US06.01.01 - US06.04.01

//Basic Flow
// 1.) Owner selects a card from thier inventory to add an image
// 2.) Owner initiates add dialog and a picture browsing routine is brought up
// 3.) Owner selects image(s) to be uploaded to card display
// 4.) Owner and Other Users can now see uploaded images of card
// 5.) Owner selects a card from thier inventory to delete an image from it
// 6.) Owner selects image(s) from dialog to remove from card
// 7.) Image(s) removed can no longer be seen by Owner or Other Users

//Exceptions
// 3.) If image is over 65536 bytes
// 3.1.) System displays an error describing limitation
// 3.2.) System returns to step 3
// 7.) Other Users have deleted image downloaded locally (See US06.05.01, US09.03.01, and US10.01.01)
// 7.1) Locally downloaded copies of an image on Other User's devices are deleted once they reconnect to the service if they were offline.
 


US06.01.01
//Claimant attaches photograph to an item

void testUS030201(){
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);

	//user navigates in the create a card GUI to the "Add images"
	// section and can add images from camera or take a new one
	Image firstImage = new Image("myImageUrl");
	Image secondImage = new Image("myImageUrl");
	card.addImage(firstImage);
	card.addImage(secondImage);
	List<Image> cardImages = card.getImages();
	assertTrue(cardImages.contains(firstImage));
	assertTrue(cardImages.contains(secondImage));
}

US06.02.01
//Owner has an Item
//Owner gets photos attached to items

void testUS060201(){
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);


	//user navigates in the create a card GUI to the "Add images"
	// section and can add images from camera or take a new one
	Image firstImage = new Image("myImageUrl");
	Image secondImage = new Image("myImageUrl");
	card.addImage(firstImage);
	card.addImage(secondImage);
	List<Image> cardImages = card.getImages();
	assertTrue(cardImages.contains(firstImage));
	assertTrue(cardImages.contains(secondImage));
}

US06.03.01
//User has an Item
//User deletes image from item

void testUS060301(){
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);
	Image firstImage = new Image("myImageUrl");
	Image secondImage = new Image("myImageUrl");
	card.addImage(firstImage);
	card.addImage(secondImage);

	List<Image> cardImages = card.getImages();
	assertTrue(cardImages.contains(firstImage));
	assertTrue(cardImages.contains(secondImage));

	//user from the edit inventory item GUI navigates to the 
	//images view and can remove, add or rearrange images
	card.deleteImage(firstImage);
	List<Image> cardImages = card.getImages();
	assertTrue(!cardImages.contains(firstImage));
	assertTrue(cardImages.contains(secondImage));
}

US06.04.01
//User adds an Image larger than 65536 bytes
//Card notifies that it cannot add a image file of that size

void testUS060401{
	Boolean exceptionThrown = false;
	Image image = new Image("largeImageUrl");
	try {
		String name = "Charizard";
		Integer quantity = 2;
		Quality quality = new Quality(73);
		String catagory = "Pokemon";
		String series = "series";
		boolean tradable = true;
		String comments = "Gently bent edge, 100HP";

		Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);
		card.addImage(image); //this should throw IOexption
		
	} catch (IOexception ex) {
		exceptionThrown = true;
	}
	assertTrue(exceptionThrown);
}


//Use Case Name: Downloading Specific Images
//Participating Actors: Borrower, Owner
//Goal: Borrower can select specific images to download even if they have downloads disabled
//Trigger: Borrower is browsing through a photo album of a Owner's card
//Precondition: Borrower must select image to be downloaded
//Postcondition: On success, pictures that were selected to be downloaded will be available offline
//Related User Stories: US06.05.01

//Basic Flow
// 1.) Borrower is browsing through images of one of Owner's cards, but has local downloads turned off (See US10.01.01)
// 2.) Borrower select an image in the album
// 3.) On first time image selection, system prompts message about being able to download images
// 4.) Image is highlighted or watermarked to notify that image is locally cached
// 5.) Borrower can disconnect from internet and still browse specific images that they downloaded

US06.05.01
//Borrower has photo downloads disabled
//Borrower manually downloads item images

void testUS600501{
	User user = GetMockUser();
	Inventory inventory = owner.getInventory();
	Card card = inventory.searchByText("Black Lotus");
	List<Image> images = card.getImages();
	//saveLocalResource(int ownerHashCode, string key, object value);
	saveLocalResource(card.hashCode, "images", images); 
}






//************************** OFFLINE BEHAVIOURS **************************
//User Case US09.01.01
public void testUS090101{
//User wants to make changes to inventory while offline and have changes
//save to server automatically when connection is restored

	/*
	Actors: User, Cards, Inventory, System
	Goal: Make changes to user inventory while offline
	Trigger:  User edits inventory items identically to the online procedure.
	Precondition:  User is offline. User has an item they want to edit.
	Postcondition:  Edited item is viewable once connection has been re-established.

	Basic Flow:
		
		1) User clicks add button from inventory view
		2) View appears with empty fields to enter info about the card
		3) User enters the info they have about the card (and possibly multiple photos)
		4) User reviews info and clicks "accept"
		5) The system creates a new card with the info provided locally
		6) The system adds the new card to the Inventory associated
			with the user locally
		7) The system re-establishes connection to server
		8) The system updates user profile to the server
		9) The card is viewable to the user from the inventory view
			now and is also viewable (if the user made it viewable)
			to friends.
	*/

	//System cannot contact server
	Boolean connection_established = Boolean.FALSE;

	//User creates new item as per User case US01.01.01/US01.05.01
	User user1 = new User();
	user1.getInventory().add(new Card());
	Profile profile = user1.getProfile();

	//System saves changes locally
	profile.saveToLocal("users_profile");

	//User re-establishes connection with server
	connection_established = Boolean.TRUE;

	//System recognizes connection and saves changes to server
	profile.saveToExternal("users_profile");

	Profile profile2 = loadFromExternal("users_profile");
	assertEquals(profile, profile2);
}

//User Case US09.02.01
public void testUS090201{
//User wants to propose trades offline, once connectivity reseumes the trades will be established

	/*
	Actors: User, Inventory, System, friend
	Goal: propose trade to friend while offline and have it appear when connection is re-established
	Trigger:  User clicks the new trade button while offline.
	Precondition:  User has a trade they wish to make and is offline
	Postcondition:  New trade is viewable by user and friend when connection is re-established

	Basic Flow:
		
		1) User clicks trade button on their friends inventory
		2) View appears with empty fields to enter about the trade
		3) User enters the info they wish to propose in the trade
		4) User reviews info and clicks "accept"
		5) The system creates a new trade locally with the info provided
		6) The system updates the server with the trade when connection is re-established
		7) The friend is notified that a trade has been proposed.
		8) the user and the friend can see the trade
	*/

	//System cannot contact server
	Boolean connection_established = Boolean.FALSE;

	//User proposes trade while offline
	User user1 = new User();
	User user2 = new User();
	Profile profile = user1.getProfile();
	Trade trade = new Trade(user1,user2);
	Boolean trade_success = trade.send();
	assertFalse(trade_success);
	
	//System saves changes locally
	profile.saveToLocal();

	//User re-establishes connection with server
	connection_established = Boolean.TRUE;

	//System recognizes connection and attempts to resend trade
	profile.sendAllTradesInQueue();

	//User 1 sees the newly proposed trade
	assertTrue(user1.hasTrade(trade.id()));

	//User 2 sees the newly proposed trade
	assertTrue(user2.hasTrade(trade.id()));
}

//User Case US09.03.01
public void testUS090301{
//User opens up friends inventories that has been previously opened while offline

	/*
	Actors: User, Inventory, System, friend
	Goal: while offline, user can view friends inventories that have previously been viewed
	Trigger:  User clicks on friends ivnentory while offline
	Precondition:  User is offline
	Postcondition:  user can view friends inventory while offline.

	Basic Flow:
		
		1) User clicks to view frieneds inventory
		2) System saves a copy of friends profile locally
		3) User loses connection with server
		4) User clicks to view friends profile again
		5) The system retrieves cached version of users profile
		6) User can browse friends profile.
	*/
	
	//User browses friends inventory as per User Case US03.01.01
	User user1 = new User();
	User user2 = new User();
	Inventory friends_inventory = user2.getInventory();
	
	//System saves copy of inventory locally
	user1.getProfile().saveToCache(user2.getName(), friends_inventory);

	//System cannot contact server
	Boolean connection_established = Boolean.FALSE;

	//User browses friends inventory while offline
	Inventory friends_cached_inventory = loadFromCache(user2.getName());

	assertEquals(friends_inventory, friends_cached_inventory);
}




public void testUS010101(){

	//User case	US10.01.01
	// User configs the app not to download photos of cards 

		/*
	Actors: User, , Config
	Goal: User wants to save phone space by not downloading photos
	Trigger:  User navitgates to config and toggles the proper toggle
	Precondition:  User wants to save space on phone
	Postcondition:  App doesnt download photos for viewing

	Basic Flow:
		
		1) User navigates to config/settings tabs
		2) System shows changable settings
		3) User toggles "download Photos" toggle to off
		4) The app no longer downloads photos for viewing
		5) The app deletes all offline images
	
	*/

	
	//Default config downloadsimages
	Config config = new Config();

	assertTrue(config.imagesDowloadable());

	//User with a swipe switch decides not 
	//to download images

	config.setImagesDownlaodable(FALSE);

	assertFalse(config.imagesDowloadable());

}


public void testUS010101(){

	//User case	US10.02.01
	//User configs thier profile settings

	/*
	Actors: User, System, Config
	Goal: User wants to change profile settings
	Trigger:  User navitgates to config and selects ed profile settings
	Precondition:  User wants to change profile info
	Postcondition:  App shows new changed profile settings

	Basic Flow:
		
		1) User navigates to config/settings tabs
		2) System shows changable settings
		3) User selects profile settings
		4) The app changes profile settings and its viewable

	Exceptions:

		4.1) Other users have downloaded friends profiles for off line viewing
		4.1) The system updates offline info as soon as the other users are online.
	
	*/

	//User creates their profile on prompt
	User user = new User("Snape", "Hogwartz");
	
	assertEquals("Snape", user.getName);
	assertEquals("Hogwartz", user.getLocation);

	//The they realize they forgot their name and where they were
	user.setName("Ruby Rose");
	user.setLocation("beacon");

	assertEquals("Ruby Rose", user.getName);
	assertEquals("beacon", user.getLocation);

}

