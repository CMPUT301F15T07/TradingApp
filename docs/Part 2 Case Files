IProject Actors:
	Cards
	Inventory
	Users -> User, Friends, Borrower, Owner
	Profile
	Photograph
	System
	Email

Inventory

//User case	US01.01.01/US01.05.01
public void testUS010101(){
	Inventory inventory = new Inventory();

	//User decides to create a new card from their
	//inventory view.  He is prompted on the UI for
	// the following data
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	
	//The card is created after the user approves the data
	//they have entered
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);

	assertEquals(name, card.getName());
	assertEquals(quantity, card.getQuantity());
	assertEquals(quality, card.getQuality());
	assertEquals(catagorty, card.getCatagory());
	assertEquals(tradable, Card.isTradable());
	assertEquals(comments, Card.getComments());


	//It gets added to their inventory
	Inventory inventory = new Inventory(card);
	assertEquals(inventory.size(), 1);

	//They can remove the card from their inventory
	inventory.removeCard("Charizard");
	assertEquals(inventory.size(),0);

}


//User case US01.04.01
public void testUS010401{

	//The user creates a card
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);

	assertEquals(name, card.getName());
	assertEquals(quantity, card.getQuantity());
	assertEquals(quality, card.getQuality());
	assertEquals(catagorty, card.getCatagory());
	assertEquals(tradable, card.isTradable());
	assertEquals(comments, card.getComments());

	//Then realized that they got all the info wrong
	//From the item view UI, they can enter the edit mode and
	//Change the card info.
	String newname = "Blue Eyes White Dragon";
	Integer newquantity = 9;
	Quality newquality = new Quality(3);
	String newcatagory = "YuGiOh";
	String newseries = "stupid series";
	boolean newtradable = false;
	String newcomments = "Dime a dozen";

	card.setName(newname);
	card.setQuantity(newquanitity);
	card.setQuality(newquality);
	card.setCatagory(newcatagory);
	card.setSeries(newseries);
	card.setTradable(newtradable);
	card.setComments(newcomments);

	assertEquals(newname, card.getName());
	assertEquals(newquantity, card.getQuantity());
	assertEquals(newquality, card.getQuality());
	assertEquals(newcatagorty, card.getCatagory());
	assertEquals(newtradable, card.isTradable());
	assertEquals(newcomments, card.getComments());

}


//user case US01.06.01
public void testUS010601(){

	Card card = new Card();

	//When the user creates a card, they can choose a default catagory from the drop down menu
	ArrayList<String> releventcatagories = new ArrayList<String>("Magic The Gathering","Pokemon","YuGiOh","Digimon","Sports","Steam Trading Card",
												"Neopets", "Amiibo Cards", "Shrek Trading Cards", "MISC");
	assertEquals(releventcatagories, card.getRelevantCatagories());
}

-----------






Browse Search Inventories of Friends

Helper Functions:

User GetMockUser(){
	User user = new User("Snape", "Hogwartz");
	String name = "Black Lotus";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Magic The Gathering";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	Card blackLotus = new Card(name, quantity, quality, catagory, series, tradable, comments);

	name = "Time Walk";
	Card timeWalk = new Card(name, quantity, quality, catagory, series, tradable, comments);

	Inventory inventory = new Inventory();
	inventory.addCard(blackLotus);
	inventory.addCard(timeWalk);
	user.addInventory(inventory);
	return user;
}

User GetMockFriend(){
	User user = GetMockUser();
	user.changeUsername("Harry Potter");
	return user;
}

US03.01.01
//The User opens a friends' profile and then opens thier inventory
//The User can then browse the friends' cards

void testUS030101(){
	User myuser = GetMockUser();
	const myTestFriendName = "Harry Potter";
	User myTestFriend = GetMockFriend();
	myuser.friends.add(myTestFriend);
	User friend = myuser.friends.getFriend(myTestFriendName);
	Inventory friendInventory = friend.getInventory();
}

US03.01.02
//The User has thier friends profile
//The User searches thier friends profile by category

void testUS030102(){
	User friend = GetMockFriend();
	Inventory friendInventory = friend.getInventory();
	String searchCategory = "Magic The Gathering";
	List<Card> results = friendInventory.searchByCategory(searchCategory);
	//serach results shownn to user
}

US03.01.03
//The User has thier friends profile
//The User searches thier friends profile by text

void testUS030102(){
	User friend = GetMockFriend();
	Inventory friendInventory = friend.getInventory();
	String searchQuery = "Black Lotus";
	List<Card> results = friendInventory.searchByText(searchQuery);
	//serach results shownn to user
}

US03.02.01
//The Owner Has Publicly Available Items
//The Owner's Friends Can Browse Those Items

void testUS030201(){
	User owner = GetMockUser();
	Inventory inventory = owner.getInventory();
	Card publicCard = inventory.searchByText("Black Lotus");
	Card privateCard = inventory.serachByText("Time Walk");
	publicCard.setPublic();
	privateCard.setPrivate();
	User friend = GetMockFriend();
	friend.friends.add(owner);
	User anotheOwner = friend.friends.getFriend("Snape");
	Inventory ownerInventory = anotherOwner.getInventory();
	List<Card> ownerCards = ownerInventory.searchByText("*");
	assertEqual(ownerCards.get(0), publicCard);
	assertEqual(ownerCards.get(1), null); //we should only get the public card
}

-----

Trade With Friends:

// US04.01.01
// Borrower wants to trade a card with the owner.
// Send a trade request to an owner of a card and check if the owner has that request.

void testUS04.01.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade = new Trade(borrower, owner);
	trade.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade.list2.add(owner.getInventory().getCard(“Mewtwo”);
	
	// Send trade offer button clicked.
	trade.sendTrade(owner);
	trade.setNotification(owner);
	assertTrue(owner.getTrades().hasTrade(trade));
}

// US04.02.01
// Test to see if the owner has a trade notification.

void testUS04.02.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade = new Trade(borrower, owner);
	trade.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade.list2.add(owner.getInventory().getCard(“Mewtwo”);
	
	// Send trade offer button clicked.
	trade.sendTrade(owner);
	trade.setNotification(owner);
	
	assertTrue(owner.getNotifications().contains(trade.setNotification(owner)));
}

// US04.03.01
// Owner can accept of decline notification.

void testUS04.03.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade1 = new Trade(borrower, owner);
	trade1.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade1.list2.add(owner.getInventory().getCard(“Mewtwo”);

	// Borrower adds cards with the “plus” button.
	Trade trade2 = new Trade(borrower, owner);
	trade2.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade2.list2.add(owner.getInventory().getCard(“Mewtwo”);
	
	// Send trade offer button clicked.
	trade1.sendTrade(owner);
	trade1.setNotification(owner);
	trade2.sendTrade(owner);
	trade2.setNotification(owner);

	//Owner clicks the accept button
	assertTrue(trade.1status() == “ACCEPTED”);	

	//Owner clicks the decline button
	assertFalse(trade2.status() == “DECLINED”);
}

// US04.04.01
// Owner can set a counter offer if the owner declines a trade

void testUS04.04.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade = new Trade(borrower, owner);
	trade.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade.list2.add(owner.getInventory().getCard(“Mewtwo”);
	
	// Send trade offer button clicked.
	trade.sendTrade(owner);
	trade.setNotification(owner);

	// Owner declines the trade.
	// Owner makes a new trade offer when the counter offer button is clicked.
	if(trade.status() == “DECLINED”) {
		Trade trade2 = newTrade(owner, borrower);
		trade2.list1.add(owner.getInventory().getCard(“Mewtwo”);
		trade2.list2.add(borrower.getInventory().getCard(“Mew”);

		trade2.sendTrade(owner);
		trade2.setNotification(borrower);
	}

	assertTrue(borrower.getNotifications().contains(trade2.setNotification(borrower)));
}

// US04.05.01
// The user or borrower can edit the trade or counter-trade.

void testUS04.05.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds and removes cards with the plus and minus button.
	Trade trade = new Trade(borrower, owner);
	trade.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade.list1.add(borrower.getInventory().getCard(“Mew”);
	trade.list2.add(owner.getInventory().getCard(“Mewtwo”);
	trade.list2.remove(1);	

	assertTrue(trade.list1.contains(“Darkrai”));
	assertTrue(trade.list2.contains(“Mewtwo”));
	assertFalse(trade.list1.contains(“Mew”));

	// Send trade offer button clicked.
	trade.sendTrade(owner);
	trade.setNotification(owner);

	// Owner declines the trade.
	// Owner makes a new trade offer when the counter offer button is clicked.
	if(trade.status() == “DECLINED”) {
		// Owner adds and removes cards with the plus and minus button.
		Trade trade2 = newTrade(owner, borrower);
		trade2.list1.add(owner.getInventory().getCard(“Deoxys”);
		trade2.list1.add(owner.getInventory().getCard(“Register”);
		trade2.list1.remove(1);
		trade2.list2.add(borrower.getInventory().getCard(“Mew”);

		assertTrue(trade.list1.contains(“Deoxys”));
		assertTrue(trade.list2.contains(“Mew”));
		assertFalse(trade.list1.contains(“Register”));

		trade2.sendTrade(owner);
		trade2.setNotification(borrower);
	}
}

// US04.06.01
// The borrower can delete the trade or counter-trade.

void testUS04.06.01() {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds and removes cards with the plus and minus button.
	Trade trade = new Trade(borrower, owner);
	trade.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade.list2.add(owner.getInventory().getCard(“Mewtwo”);

	// Send trade offer button clicked.
	trade.sendTrade(owner);
	trade.setNotification(owner);

	// Owner declines the trade.
	// Owner makes a new trade offer when the counter offer button is clicked.
	if(trade.status() == “DECLINED”) {
		// Owner adds and removes cards with the plus and minus button.
		Trade trade2 = newTrade(owner, borrower);
		trade2.list1.add(owner.getInventory().getCard(“Deoxys”);
		trade2.list2.add(borrower.getInventory().getCard(“Mew”);

		// User clicks the delete trade button or back 
		// button to stop the trade they are making.
		trade.destructor();
	}

	assertNull(trade);

	User borrower2 = new User(currentUser.Name, “Canada”);
	User owner2 = new User(“Mr. Bean”, “Canada”);

	// Borrower adds and removes cards with the plus and minus button.
	Trade trade2 = new Trade(borrower2, owner2);
	trade2.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade2.list2.add(owner.getInventory().getCard(“Mewtwo”);
	
	// User clicks the delete trade button or back 
	// button to stop the trade they are making.
	trade2.destructor();

	assertNull(trade2);
}

// US04.07.01
// If the owner of a trade accepts, both parties are email relevant trace information,
// as well as the owner will supply comments for how to continue with the trade.

void testUS04.07.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade = new Trade(borrower, owner);
	trade.list1.add(borrower.getInventory().getCard(“Darkrai”);
	trade.list2.add(owner.getInventory().getCard(“Mewtwo”);

	// Send trade offer button clicked.
	trade.sendTrade(owner);
	trade.setNotification(owner);

	// Owner clicks the accept button. An input box
	// will be displayed for extra comments.
	String extraComments = inputTextView.text;
	Email emailBorrower = new Email(borrower, extraComments);
	Email emailOwner = new Email(owner, “”);

	emailBorrower.send();
	emailOwner.send();

	assertNotNull(extraComments);
	assertEquals(emailOwner.status() ,“SENT”);
	assertEquals(emailBorrower.status(), “SENT”);
}

// US04.08.01
// Owners and Borrowers can view all past trades with themselves.

void testUS04.08.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade1 = new Trade(borrower, owner);
	Trade trade2 = new Trade(borrower, owner);

	// Send trade offer button clicked.	
	trade1.sendTrade(owner);
	trade2.sendTrade(owner);

	// Owner accepts trade1 and leaves trade2 alone
	// User exits and checks there trades
	List<Trade> ownerTrades = owner.getTrades()
	List<Trade> borrowerTrades = owner.getTrades()

	assertTrue(ownerTrades.contains(trade1));
	assertTrue(ownerTrades.contains(trade2));
	assertTrue(borrowerTrades.contains(trade1));
	assertTrue(borrowerTrades.contains(trade2));
}

// US04.09.01
// Owners and Borrowers can view all past trades with themselves as
// either a borrower or an owner.

void testUS04.09.01 () {
	User borrower = new User(currentUser.Name, “Canada”);
	User owner = new User(“Mr. Bean”, “Canada”);

	// Borrower adds cards with the “plus” button.
	Trade trade1 = new Trade(borrower, owner);
	Trade trade2 = new Trade(borrower, owner);

	// Send trade offer button clicked.	
	trade1.sendTrade(owner);
	trade2.sendTrade(owner);

	// Owner accepts trade1 and leaves trade2 alone
	// User exits and checks there trades
	List<Trade> ownerTrades = owner.getTrades()
	List<Trade> borrowerTrades = owner.getTrades()

	assertTrue(ownerTrades.get(0).isOwner());
	assertTrue(ownerTrades.get(1).isOwner());
	assertTrue(borrowerTrades.get(0).isOwner());
	assertTrue(borrowerTrades.get(1).isOwner());

	//Viewing trades and separating them will be done in UI.
}

————-

Photographs of Items


US06.01.01
//Claimant attaches photograph to an item

void testUS030201(){
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);

	//user navigates in the create a card GUI to the "Add images"
	// section and can add images from camera or take a new one
	Image firstImage = new Image("myImageUrl");
	Image secondImage = new Image("myImageUrl");
	card.addImage(firstImage);
	card.addImage(secondImage);
	List<Image> cardImages = card.getImages();
	assertTrue(cardImages.contains(firstImage));
	assertTrue(cardImages.contains(secondImage));
}

US06.02.01
//Owner has an Item
//Owner gets photos attached to items

void testUS060201(){
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);


	//user navigates in the create a card GUI to the "Add images"
	// section and can add images from camera or take a new one
	Image firstImage = new Image("myImageUrl");
	Image secondImage = new Image("myImageUrl");
	card.addImage(firstImage);
	card.addImage(secondImage);
	List<Image> cardImages = card.getImages();
	assertTrue(cardImages.contains(firstImage));
	assertTrue(cardImages.contains(secondImage));
}

US06.03.01
//User has an Item
//User deletes image from item

void testUS060301(){
	String name = "Charizard";
	Integer quantity = 2;
	Quality quality = new Quality(73);
	String catagory = "Pokemon";
	String series = "series";
	boolean tradable = true;
	String comments = "Gently bent edge, 100HP";
	Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);
	Image firstImage = new Image("myImageUrl");
	Image secondImage = new Image("myImageUrl");
	card.addImage(firstImage);
	card.addImage(secondImage);

	List<Image> cardImages = card.getImages();
	assertTrue(cardImages.contains(firstImage));
	assertTrue(cardImages.contains(secondImage));

	//user from the edit inventory item GUI navigates to the 
	//images view and can remove, add or rearrange images
	card.deleteImage(firstImage);
	List<Image> cardImages = card.getImages();
	assertTrue(!cardImages.contains(firstImage));
	assertTrue(cardImages.contains(secondImage));
}

US06.04.01
//User adds an Image larger than 65536 bytes
//Card notifies that it cannot add a image file of that size

void testUS060401{
	Boolean exceptionThrown = false;
	Image image = new Image("largeImageUrl");
	try {
		String name = "Charizard";
		Integer quantity = 2;
		Quality quality = new Quality(73);
		String catagory = "Pokemon";
		String series = "series";
		boolean tradable = true;
		String comments = "Gently bent edge, 100HP";

		Card card = new Card(name, quantity, quality, catagory, series, tradable, comments);
		card.addImage(image); //this should throw IOexption
		
	} catch (IOexception ex) {
		exceptionThrown = true;
	}
	assertTrue(exceptionThrown);
}

//US06.05.01
//See: US10.01.01






//************************** OFFLINE BEHAVIOURS **************************
//User Case US09.01.01
public void testUS090101{
//User wants to make changes to inventory while offline and have changes
//save to server automatically when connection is restored

	//System cannot contact server
	Boolean connection_established = Boolean.FALSE;

	//User creates new item as per User case US01.01.01/US01.05.01
	User user1 = new User();
	user1.getInventory().add(new Card());
	Profile profile = user1.getProfile();

	//System saves changes locally
	profile.saveToLocal("users_profile");

	//User re-establishes connection with server
	connection_established = Boolean.TRUE;

	//System recognizes connection and saves changes to server
	profile.saveToExternal("users_profile");

	Profile profile2 = loadFromExternal("users_profile");
	assertEquals(profile, profile2);
}

//User Case US09.02.01
public void testUS090201{
//User wants to propose trades offline, once connectivity reseumes the trades will be established

	//System cannot contact server
	Boolean connection_established = Boolean.FALSE;

	//User proposes trade while offline
	User user1 = new User();
	User user2 = new User();
	Profile profile = user1.getProfile();
	Trade trade = new Trade(user1,user2);
	Boolean trade_success = trade.send();
	assertFalse(trade_success);
	
	//System saves changes locally
	profile.saveToLocal();

	//User re-establishes connection with server
	connection_established = Boolean.TRUE;

	//System recognizes connection and attempts to resend trade
	profile.sendAllTradesInQueue();

	//User 1 sees the newly proposed trade
	assertTrue(user1.hasTrade(trade.id()));

	//User 2 sees the newly proposed trade
	assertTrue(user2.hasTrade(trade.id()));
}

//User Case US09.03.01
public void testUS090301{
//User opens up friends inventories that has been previously opened while offline
	
	//User browses friends inventory as per User Case US03.01.01
	User user1 = new User();
	User user2 = new User();
	Inventory friends_inventory = user2.getInventory();
	
	//System saves copy of inventory locally
	user1.getProfile().saveToCache(user2.getName(), friends_inventory);

	//System cannot contact server
	Boolean connection_established = Boolean.FALSE;

	//User browses friends inventory while offline
	Inventory friends_cached_inventory = loadFromCache(user2.getName());

	assertEquals(friends_inventory, friends_cached_inventory);
}
